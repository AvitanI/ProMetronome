{"version":3,"file":"static/js/788.e7b0c42f.chunk.js","mappings":"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","sources":["components/ProgressChart.js","components/History.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Grid,\n  Chip,\n  Stack,\n} from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n} from 'recharts';\nimport useMetronomeStore from '../stores/metronomeStore';\n\nconst ProgressChart = () => {\n  const theme = useTheme();\n  const { sessions } = useMetronomeStore();\n  const [chartType, setChartType] = React.useState('practice-time');\n  const [timeRange, setTimeRange] = React.useState('all');\n\n  // Filter sessions based on time range\n  const filteredSessions = useMemo(() => {\n    if (timeRange === 'all') return sessions;\n    \n    const now = new Date();\n    const cutoff = new Date();\n    \n    switch (timeRange) {\n      case 'week':\n        cutoff.setDate(now.getDate() - 7);\n        break;\n      case 'month':\n        cutoff.setMonth(now.getMonth() - 1);\n        break;\n      case '3months':\n        cutoff.setMonth(now.getMonth() - 3);\n        break;\n      default:\n        return sessions;\n    }\n    \n    return sessions.filter(session => new Date(session.date) >= cutoff);\n  }, [sessions, timeRange]);\n\n  // Prepare data for different chart types\n  const chartData = useMemo(() => {\n    if (filteredSessions.length === 0) return [];\n\n    switch (chartType) {\n      case 'practice-time':\n        return filteredSessions.map((session, index) => ({\n          session: index + 1,\n          date: new Date(session.date).toLocaleDateString(),\n          practiceTime: Math.round(session.duration / (1000 * 60)), // Convert to minutes\n          averageBpm: session.averageBpm,\n        }));\n\n      case 'bpm-progress':\n        return filteredSessions.map((session, index) => ({\n          session: index + 1,\n          date: new Date(session.date).toLocaleDateString(),\n          averageBpm: session.averageBpm,\n          minBpm: session.bpmRange.min,\n          maxBpm: session.bpmRange.max,\n        }));\n\n      case 'daily-summary':\n        // Group by day\n        const dailyData = {};\n        filteredSessions.forEach(session => {\n          const day = new Date(session.date).toLocaleDateString();\n          if (!dailyData[day]) {\n            dailyData[day] = {\n              date: day,\n              totalTime: 0,\n              sessionCount: 0,\n              avgBpm: 0,\n              bpmSum: 0,\n            };\n          }\n          dailyData[day].totalTime += session.duration;\n          dailyData[day].sessionCount += 1;\n          dailyData[day].bpmSum += session.averageBpm;\n        });\n\n        return Object.values(dailyData).map(day => ({\n          ...day,\n          totalTime: Math.round(day.totalTime / (1000 * 60)), // Convert to minutes\n          avgBpm: Math.round(day.bpmSum / day.sessionCount),\n        }));\n\n      case 'bpm-distribution':\n        // Group by BPM ranges\n        const bpmRanges = {\n          '60-80': 0,\n          '81-100': 0,\n          '101-120': 0,\n          '121-140': 0,\n          '141-160': 0,\n          '161-180': 0,\n          '181+': 0,\n        };\n\n        filteredSessions.forEach(session => {\n          const bpm = session.averageBpm;\n          if (bpm <= 80) bpmRanges['60-80']++;\n          else if (bpm <= 100) bpmRanges['81-100']++;\n          else if (bpm <= 120) bpmRanges['101-120']++;\n          else if (bpm <= 140) bpmRanges['121-140']++;\n          else if (bpm <= 160) bpmRanges['141-160']++;\n          else if (bpm <= 180) bpmRanges['161-180']++;\n          else bpmRanges['181+']++;\n        });\n\n        return Object.entries(bpmRanges).map(([range, count]) => ({\n          range,\n          count,\n          percentage: Math.round((count / filteredSessions.length) * 100),\n        }));\n\n      default:\n        return [];\n    }\n  }, [filteredSessions, chartType]);\n\n  // Colors for pie chart\n  const pieColors = [\n    theme.palette.primary.main,\n    theme.palette.secondary.main,\n    theme.palette.error.main,\n    theme.palette.warning.main,\n    theme.palette.info.main,\n    theme.palette.success.main,\n    theme.palette.primary.light,\n  ];\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <Card elevation={3} sx={{ p: 1 }}>\n          <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\n            {label}\n          </Typography>\n          {payload.map((entry, index) => (\n            <Typography\n              key={index}\n              variant=\"body2\"\n              sx={{ color: entry.color }}\n            >\n              {entry.name}: {entry.value}\n              {entry.name.includes('Time') && ' min'}\n              {entry.name.includes('Bpm') && ' BPM'}\n            </Typography>\n          ))}\n        </Card>\n      );\n    }\n    return null;\n  };\n\n  const renderChart = () => {\n    if (chartData.length === 0) {\n      return (\n        <Box\n          sx={{\n            height: 300,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No data available for the selected time range\n          </Typography>\n        </Box>\n      );\n    }\n\n    switch (chartType) {\n      case 'practice-time':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke={theme.palette.divider} />\n              <XAxis \n                dataKey=\"session\" \n                stroke={theme.palette.text.secondary}\n                tick={{ fontSize: 12 }}\n              />\n              <YAxis \n                stroke={theme.palette.text.secondary}\n                tick={{ fontSize: 12 }}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Line\n                type=\"monotone\"\n                dataKey=\"practiceTime\"\n                stroke={theme.palette.primary.main}\n                strokeWidth={3}\n                dot={{ fill: theme.palette.primary.main, strokeWidth: 2, r: 4 }}\n                name=\"Practice Time\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n\n      case 'bpm-progress':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke={theme.palette.divider} />\n              <XAxis \n                dataKey=\"session\" \n                stroke={theme.palette.text.secondary}\n                tick={{ fontSize: 12 }}\n              />\n              <YAxis \n                stroke={theme.palette.text.secondary}\n                tick={{ fontSize: 12 }}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Line\n                type=\"monotone\"\n                dataKey=\"averageBpm\"\n                stroke={theme.palette.primary.main}\n                strokeWidth={3}\n                dot={{ fill: theme.palette.primary.main, strokeWidth: 2, r: 4 }}\n                name=\"Average BPM\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"maxBpm\"\n                stroke={theme.palette.secondary.main}\n                strokeWidth={2}\n                strokeDasharray=\"5 5\"\n                dot={{ fill: theme.palette.secondary.main, strokeWidth: 2, r: 3 }}\n                name=\"Max BPM\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n\n      case 'daily-summary':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke={theme.palette.divider} />\n              <XAxis \n                dataKey=\"date\" \n                stroke={theme.palette.text.secondary}\n                tick={{ fontSize: 12 }}\n                angle={-45}\n                textAnchor=\"end\"\n                height={60}\n              />\n              <YAxis \n                stroke={theme.palette.text.secondary}\n                tick={{ fontSize: 12 }}\n              />\n              <Tooltip content={<CustomTooltip />} />\n              <Bar\n                dataKey=\"totalTime\"\n                fill={theme.palette.primary.main}\n                name=\"Total Time\"\n                radius={[4, 4, 0, 0]}\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n\n      case 'bpm-distribution':\n        return (\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={chartData.filter(item => item.count > 0)}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={({ range, percentage }) => `${range} (${percentage}%)`}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"count\"\n              >\n                {chartData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={pieColors[index % pieColors.length]} />\n                ))}\n              </Pie>\n              <Tooltip content={<CustomTooltip />} />\n            </PieChart>\n          </ResponsiveContainer>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  if (sessions.length === 0) {\n    return (\n      <Box sx={{ textAlign: 'center', py: 4 }}>\n        <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          No Progress Data Yet\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Start practicing to see your progress charts and analytics.\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      {/* Controls */}\n      <Grid container spacing={2} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>Chart Type</InputLabel>\n            <Select\n              value={chartType}\n              onChange={(e) => setChartType(e.target.value)}\n              label=\"Chart Type\"\n            >\n              <MenuItem value=\"practice-time\">Practice Time Progress</MenuItem>\n              <MenuItem value=\"bpm-progress\">BPM Progress</MenuItem>\n              <MenuItem value=\"daily-summary\">Daily Summary</MenuItem>\n              <MenuItem value=\"bpm-distribution\">BPM Distribution</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <FormControl fullWidth size=\"small\">\n            <InputLabel>Time Range</InputLabel>\n            <Select\n              value={timeRange}\n              onChange={(e) => setTimeRange(e.target.value)}\n              label=\"Time Range\"\n            >\n              <MenuItem value=\"all\">All Time</MenuItem>\n              <MenuItem value=\"week\">Last Week</MenuItem>\n              <MenuItem value=\"month\">Last Month</MenuItem>\n              <MenuItem value=\"3months\">Last 3 Months</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n\n      {/* Chart Description */}\n      <Stack direction=\"row\" spacing={1} sx={{ mb: 2, flexWrap: 'wrap' }}>\n        {chartType === 'practice-time' && (\n          <Chip \n            label=\"Shows practice time per session\" \n            size=\"small\" \n            color=\"primary\" \n            variant=\"outlined\" \n          />\n        )}\n        {chartType === 'bpm-progress' && (\n          <Chip \n            label=\"Shows BPM progression over time\" \n            size=\"small\" \n            color=\"primary\" \n            variant=\"outlined\" \n          />\n        )}\n        {chartType === 'daily-summary' && (\n          <Chip \n            label=\"Shows total practice time per day\" \n            size=\"small\" \n            color=\"primary\" \n            variant=\"outlined\" \n          />\n        )}\n        {chartType === 'bpm-distribution' && (\n          <Chip \n            label=\"Shows BPM range distribution\" \n            size=\"small\" \n            color=\"primary\" \n            variant=\"outlined\" \n          />\n        )}\n      </Stack>\n\n      {/* Chart */}\n      <Card elevation={2}>\n        <CardContent>\n          <Typography variant=\"h6\" sx={{ mb: 2, textAlign: 'center' }}>\n            {chartType === 'practice-time' && 'Practice Time Progress'}\n            {chartType === 'bpm-progress' && 'BPM Progress Over Time'}\n            {chartType === 'daily-summary' && 'Daily Practice Summary'}\n            {chartType === 'bpm-distribution' && 'BPM Range Distribution'}\n          </Typography>\n          {renderChart()}\n        </CardContent>\n      </Card>\n\n      {/* Insights */}\n      {filteredSessions.length > 0 && (\n        <Card elevation={1} sx={{ mt: 2 }}>\n          <CardContent>\n            <Typography variant=\"h6\" sx={{ mb: 2 }}>\n              Quick Insights\n            </Typography>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6} md={3}>\n                <Box sx={{ textAlign: 'center' }}>\n                  <Typography variant=\"h4\" color=\"primary.main\">\n                    {filteredSessions.length}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Sessions\n                  </Typography>\n                </Box>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Box sx={{ textAlign: 'center' }}>\n                  <Typography variant=\"h4\" color=\"primary.main\">\n                    {Math.round(\n                      filteredSessions.reduce((sum, s) => sum + s.duration, 0) / (1000 * 60)\n                    )}m\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Total Time\n                  </Typography>\n                </Box>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Box sx={{ textAlign: 'center' }}>\n                  <Typography variant=\"h4\" color=\"primary.main\">\n                    {Math.round(\n                      filteredSessions.reduce((sum, s) => sum + s.averageBpm, 0) / filteredSessions.length\n                    )}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Avg BPM\n                  </Typography>\n                </Box>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Box sx={{ textAlign: 'center' }}>\n                  <Typography variant=\"h4\" color=\"primary.main\">\n                    {Math.round(\n                      filteredSessions.reduce((sum, s) => sum + s.duration, 0) / \n                      (1000 * 60 * filteredSessions.length)\n                    )}m\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Avg Session\n                  </Typography>\n                </Box>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n      )}\n    </Box>\n  );\n};\n\nexport default ProgressChart;\n","import React, { useState, useMemo, useCallback } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Grid,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Divider,\n  Chip,\n  useMediaQuery,\n  Button,\n  Alert,\n  Tabs,\n  Tab,\n} from '@mui/material';\nimport {\n  Delete as DeleteIcon,\n  ClearAll as ClearAllIcon,\n  Timer as TimerIcon,\n  Speed as SpeedIcon,\n  PlayArrow as PlayIcon,\n  ShowChart as ShowChartIcon,\n  List as ListIcon,\n} from '@mui/icons-material';\nimport { useTheme } from '@mui/material/styles';\nimport useMetronomeStore from '../stores/metronomeStore';\nimport ProgressChart from './ProgressChart';\n\nconst History = React.memo(() => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  const [historyTab, setHistoryTab] = useState(0);\n  \n  const { \n    sessions, \n    clearHistory, \n    deleteSession, \n    getHistoryStats,\n    generateSampleData\n  } = useMetronomeStore();\n\n  console.log('History component - sessions:', sessions);\n  \n  // Memoize expensive calculations\n  const stats = useMemo(() => getHistoryStats(), [sessions, getHistoryStats]);\n\n  // Memoize formatters to prevent recreating on every render\n  const formatDate = useCallback((dateString) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n  }, []);\n\n  const formatDuration = useCallback((duration) => {\n    const minutes = Math.floor(duration / (1000 * 60));\n    const seconds = Math.floor((duration % (1000 * 60)) / 1000);\n    return `${minutes}m ${seconds}s`;\n  }, []);\n\n  // Memoize StatCard component to prevent re-renders\n  const StatCard = useCallback(({ icon, title, value, subtitle }) => (\n    <Card\n      elevation={2}\n      sx={{\n        height: '100%',\n        background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${theme.palette.background.default} 100%)`,\n        border: `1px solid ${theme.palette.divider}`,\n      }}\n    >\n      <CardContent sx={{ textAlign: 'center', py: 3 }}>\n        <Box sx={{ color: theme.palette.primary.main, mb: 1 }}>\n          {icon}\n        </Box>\n        <Typography\n          variant=\"h4\"\n          sx={{\n            fontWeight: 700,\n            color: theme.palette.primary.main,\n            mb: 1,\n          }}\n        >\n          {value}\n        </Typography>\n        <Typography\n          variant=\"body1\"\n          sx={{\n            fontWeight: 600,\n            color: theme.palette.text.primary,\n            mb: 0.5,\n          }}\n        >\n          {title}\n        </Typography>\n        {subtitle && (\n          <Typography\n            variant=\"caption\"\n            sx={{\n              color: theme.palette.text.secondary,\n            }}\n          >\n            {subtitle}\n          </Typography>\n        )}\n      </CardContent>\n    </Card>\n  ), [theme]);\n\n  // Optimize session list rendering with useMemo\n  const reversedSessions = useMemo(() => \n    sessions.slice().reverse(), \n    [sessions]\n  );\n\n  if (sessions.length === 0) {\n    return (\n      <Box sx={{ width: '100%', maxWidth: 600, mx: 'auto', p: 2 }}>\n        <Alert \n          severity=\"info\" \n          sx={{ \n            mb: 3,\n            '& .MuiAlert-message': {\n              width: '100%',\n              textAlign: 'center'\n            }\n          }}\n        >\n          <Typography variant=\"h6\" sx={{ mb: 1 }}>\n            No Practice History Yet\n          </Typography>\n          <Typography variant=\"body2\">\n            Start practicing with the metronome to track your sessions and see detailed statistics about your practice time and BPM usage.\n          </Typography>\n        </Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ width: '100%', maxWidth: 800, mx: 'auto', p: 2 }}>\n      {/* History Tabs */}\n      <Card elevation={2} sx={{ mb: 3 }}>\n        <Tabs\n          value={historyTab}\n          onChange={(e, newValue) => setHistoryTab(newValue)}\n          variant={isMobile ? \"scrollable\" : \"standard\"}\n          centered={!isMobile}\n          scrollButtons={isMobile ? \"auto\" : false}\n          allowScrollButtonsMobile={true}\n          sx={{\n            '& .MuiTab-root': {\n              minHeight: 56,\n              fontSize: { xs: '0.875rem', sm: '0.95rem' },\n              fontWeight: 600,\n              textTransform: 'none',\n              minWidth: { xs: 'auto', sm: 160 },\n              px: { xs: 1, sm: 2 },\n            },\n            '& .MuiTabs-scrollButtons': {\n              '&.Mui-disabled': {\n                opacity: 0.3,\n              },\n            },\n          }}\n        >\n          <Tab\n            icon={<ShowChartIcon />}\n            label=\"Progress Charts\"\n            iconPosition=\"start\"\n          />\n          <Tab\n            icon={<ListIcon />}\n            label=\"Session History\"\n            iconPosition=\"start\"\n          />\n        </Tabs>\n      </Card>\n\n      {/* Tab Content */}\n      {historyTab === 0 && <ProgressChart />}\n      \n      {historyTab === 1 && (\n        <>\n          {sessions.length === 0 ? (\n            <Alert \n              severity=\"info\" \n              sx={{ \n                mb: 3,\n                '& .MuiAlert-message': {\n                  width: '100%',\n                  textAlign: 'center'\n                }\n              }}\n            >\n              <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                No Practice History Yet\n              </Typography>\n              <Typography variant=\"body2\">\n                Start practicing with the metronome to track your sessions and see detailed statistics about your practice time and BPM usage.\n              </Typography>\n              <Button\n                variant=\"outlined\"\n                onClick={generateSampleData}\n                sx={{ mt: 2 }}\n                size=\"small\"\n              >\n                Generate Sample Data (For Demo)\n              </Button>\n            </Alert>\n          ) : (\n            <>\n              {/* Statistics Cards */}\n              <Grid container spacing={2} sx={{ mb: 3 }}>\n                <Grid item xs={12} sm={4}>\n                  <StatCard\n                    icon={<PlayIcon sx={{ fontSize: 32 }} />}\n                    title=\"Total Sessions\"\n                    value={stats.totalSessions}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <StatCard\n                    icon={<TimerIcon sx={{ fontSize: 32 }} />}\n                    title=\"Total Practice\"\n                    value={stats.totalPracticeTimeFormatted}\n                  />\n                </Grid>\n                <Grid item xs={12} sm={4}>\n                  <StatCard\n                    icon={<SpeedIcon sx={{ fontSize: 32 }} />}\n                    title=\"Average BPM\"\n                    value={stats.averageBpm}\n                  />\n                </Grid>\n              </Grid>\n\n              {/* Sessions List */}\n              <Card elevation={2}>\n                <CardContent>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                    <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                      Practice Sessions\n                    </Typography>\n                    <Button\n                      startIcon={<ClearAllIcon />}\n                      onClick={clearHistory}\n                      size=\"small\"\n                      color=\"error\"\n                      variant=\"outlined\"\n                    >\n                      Clear All\n                    </Button>\n                  </Box>\n                  \n                  <List>\n                    {reversedSessions.map((session, index) => (\n                      <React.Fragment key={session.id}>\n                        <ListItem\n                          sx={{\n                            px: 0,\n                            py: 2,\n                            flexDirection: isMobile ? 'column' : 'row',\n                            alignItems: isMobile ? 'flex-start' : 'center',\n                          }}\n                        >\n                          <ListItemText\n                            primary={\n                              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                                <Typography variant=\"body1\" sx={{ fontWeight: 600 }}>\n                                  {formatDate(session.date)}\n                                </Typography>\n                                <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                                  <Chip\n                                    label={`${formatDuration(session.duration)}`}\n                                    size=\"small\"\n                                    color=\"primary\"\n                                    variant=\"outlined\"\n                                  />\n                                  <Chip\n                                    label={`Avg: ${session.averageBpm} BPM`}\n                                    size=\"small\"\n                                    color=\"secondary\"\n                                    variant=\"outlined\"\n                                  />\n                                  <Chip\n                                    label={`${session.bpmRange.min}-${session.bpmRange.max} BPM`}\n                                    size=\"small\"\n                                    variant=\"outlined\"\n                                  />\n                                  <Chip\n                                    label={session.timeSignature}\n                                    size=\"small\"\n                                    variant=\"outlined\"\n                                  />\n                                  {session.subdivision !== 'None' && (\n                                    <Chip\n                                      label={session.subdivision}\n                                      size=\"small\"\n                                      variant=\"outlined\"\n                                    />\n                                  )}\n                                </Box>\n                              </Box>\n                            }\n                            primaryTypographyProps={{ component: 'div' }}\n                          />\n                          <ListItemSecondaryAction>\n                            <IconButton\n                              edge=\"end\"\n                              onClick={() => deleteSession(session.id)}\n                              size=\"small\"\n                              color=\"error\"\n                            >\n                              <DeleteIcon />\n                            </IconButton>\n                          </ListItemSecondaryAction>\n                        </ListItem>\n                        {index < reversedSessions.length - 1 && <Divider />}\n                      </React.Fragment>\n                    ))}\n                  </List>\n                </CardContent>\n              </Card>\n            </>\n          )}\n        </>\n      )}\n    </Box>\n  );\n});\n\nexport default History;\n"],"names":["ProgressChart","theme","useTheme","sessions","useMetronomeStore","chartType","setChartType","React","timeRange","setTimeRange","filteredSessions","useMemo","now","Date","cutoff","setDate","getDate","setMonth","getMonth","filter","session","date","chartData","length","map","index","toLocaleDateString","practiceTime","Math","round","duration","averageBpm","minBpm","bpmRange","min","maxBpm","max","dailyData","forEach","day","totalTime","sessionCount","avgBpm","bpmSum","Object","values","_objectSpread","bpmRanges","bpm","entries","_ref","range","count","percentage","pieColors","palette","primary","main","secondary","error","warning","info","success","light","CustomTooltip","_ref2","active","payload","label","_jsxs","Card","elevation","sx","p","children","_jsx","Typography","variant","fontWeight","entry","color","name","value","includes","Box","textAlign","py","mb","width","Grid","container","spacing","item","xs","sm","FormControl","fullWidth","size","InputLabel","Select","onChange","e","target","MenuItem","Stack","direction","flexWrap","Chip","CardContent","renderChart","height","display","alignItems","justifyContent","ResponsiveContainer","LineChart","data","CartesianGrid","strokeDasharray","stroke","divider","XAxis","dataKey","text","tick","fontSize","YAxis","Tooltip","content","Line","type","strokeWidth","dot","fill","r","BarChart","angle","textAnchor","Bar","radius","PieChart","Pie","cx","cy","labelLine","_ref3","concat","outerRadius","Cell","mt","md","reduce","sum","s","isMobile","useMediaQuery","breakpoints","down","historyTab","setHistoryTab","useState","clearHistory","deleteSession","getHistoryStats","generateSampleData","console","log","stats","formatDate","useCallback","dateString","toLocaleTimeString","hour","minute","formatDuration","minutes","floor","seconds","StatCard","icon","title","subtitle","background","paper","default","border","reversedSessions","slice","reverse","maxWidth","mx","Alert","severity","Tabs","newValue","centered","scrollButtons","allowScrollButtonsMobile","minHeight","textTransform","minWidth","px","opacity","Tab","ShowChartIcon","iconPosition","ListIcon","_Fragment","Button","onClick","PlayIcon","totalSessions","TimerIcon","totalPracticeTimeFormatted","SpeedIcon","startIcon","ClearAllIcon","List","ListItem","flexDirection","ListItemText","gap","timeSignature","subdivision","primaryTypographyProps","component","ListItemSecondaryAction","IconButton","edge","id","DeleteIcon","Divider"],"sourceRoot":""}