{"version":3,"file":"static/js/138.dc9a5562.chunk.js","mappings":"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","sources":["services/musicAPI.js","components/SongSearchDialog.js","components/SongManager.js"],"sourcesContent":["// Updated Music API Service for ProMetronome Backend\nclass MusicAPIService {\n  constructor() {\n    // Use environment variable for production, fallback to localhost for development\n    this.backendURL = process.env.REACT_APP_API_URL || 'http://localhost:5136/api';\n    this.fallbackToDemo = true; // Enable demo mode if backend is unavailable\n  }\n\n  // Search songs using our .NET backend\n  async searchSongs(query, limit = 20, offset = 0) {\n    try {\n      const response = await fetch(`${this.backendURL}/music/search?query=${encodeURIComponent(query)}&limit=${limit}&offset=${offset}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        mode: 'cors',\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      return {\n        songs: data.songs.map(song => ({\n          id: song.id,\n          title: song.title,\n          artist: song.artist,\n          album: song.album,\n          duration: song.duration ? Math.floor(song.duration / 1000) : null,\n          preview_url: song.previewUrl,\n          artwork: song.artworkUrl,\n          genre: song.genre,\n          bpm: song.bpm,\n          explicit: song.isExplicit,\n          popularity: song.popularity,\n          spotify_url: song.spotifyUrl,\n          audio_features: song.audioFeatures\n        })),\n        total: data.total,\n        hasMore: data.total > (offset + limit)\n      };\n    } catch (error) {\n      console.warn('Backend API unavailable, using demo mode:', error.message);\n      \n      if (this.fallbackToDemo) {\n        return this.getMockSearchResults(query);\n      }\n      \n      throw error;\n    }\n  }\n\n  // Get detailed song information by ID\n  async getSongById(id) {\n    try {\n      const response = await fetch(`${this.backendURL}/music/song/${id}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        mode: 'cors',\n      });\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          return null;\n        }\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const song = await response.json();\n      \n      return {\n        id: song.id,\n        title: song.title,\n        artist: song.artist,\n        album: song.album,\n        duration: song.duration ? Math.floor(song.duration / 1000) : null,\n        preview_url: song.previewUrl,\n        artwork: song.artworkUrl,\n        genre: song.genre,\n        bpm: song.bpm,\n        explicit: song.isExplicit,\n        popularity: song.popularity,\n        spotify_url: song.spotifyUrl,\n        audio_features: song.audioFeatures\n      };\n    } catch (error) {\n      console.warn('Backend API unavailable for song details:', error.message);\n      \n      if (this.fallbackToDemo && id.startsWith('demo')) {\n        return this.getMockSongById(id);\n      }\n      \n      throw error;\n    }\n  }\n\n  // Check backend health\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.backendURL}/music/health`, {\n        method: 'GET',\n        timeout: 3000\n      });\n      \n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Mock search results for demo when backend is unavailable\n  getMockSearchResults(query) {\n    const queryLower = query.toLowerCase();\n    \n    const demoSongs = [\n      {\n        id: 'demo_blinding_lights',\n        title: 'Blinding Lights',\n        artist: 'The Weeknd',\n        album: 'After Hours',\n        genre: 'Pop',\n        bpm: 171,\n        duration: 200,\n        preview_url: null,\n        artwork: 'https://via.placeholder.com/300x300/1DB954/ffffff?text=Demo',\n        explicit: false,\n        popularity: 95,\n        source: 'demo',\n        confidence: 0.9,\n        audio_features: {\n          tempo: 171,\n          energy: 0.73,\n          danceability: 0.51,\n          valence: 0.33\n        }\n      },\n      {\n        id: 'demo_good_4_u',\n        title: 'Good 4 U',\n        artist: 'Olivia Rodrigo',\n        album: 'SOUR',\n        genre: 'Pop Rock',\n        bpm: 166,\n        duration: 178,\n        preview_url: null,\n        artwork: 'https://via.placeholder.com/300x300/FF6B6B/ffffff?text=Demo',\n        explicit: false,\n        popularity: 89,\n        source: 'demo',\n        confidence: 0.85,\n        audio_features: {\n          tempo: 166,\n          energy: 0.66,\n          danceability: 0.56,\n          valence: 0.43\n        }\n      },\n      {\n        id: 'demo_levitating',\n        title: 'Levitating',\n        artist: 'Dua Lipa',\n        album: 'Future Nostalgia',\n        genre: 'Dance Pop',\n        bpm: 103,\n        duration: 203,\n        preview_url: null,\n        artwork: 'https://via.placeholder.com/300x300/9B59B6/ffffff?text=Demo',\n        explicit: false,\n        popularity: 88,\n        source: 'demo',\n        confidence: 0.92,\n        audio_features: {\n          tempo: 103,\n          energy: 0.82,\n          danceability: 0.88,\n          valence: 0.85\n        }\n      },\n      {\n        id: 'demo_watermelon_sugar',\n        title: 'Watermelon Sugar',\n        artist: 'Harry Styles',\n        album: 'Fine Line',\n        genre: 'Pop Rock',\n        bpm: 95,\n        duration: 174,\n        preview_url: null,\n        artwork: 'https://via.placeholder.com/300x300/E74C3C/ffffff?text=Demo',\n        explicit: false,\n        popularity: 92,\n        source: 'demo',\n        confidence: 0.88,\n        audio_features: {\n          tempo: 95,\n          energy: 0.54,\n          danceability: 0.73,\n          valence: 0.56\n        }\n      }\n    ];\n\n    const filteredSongs = demoSongs.filter(song => \n      song.title.toLowerCase().includes(queryLower) ||\n      song.artist.toLowerCase().includes(queryLower) ||\n      song.album.toLowerCase().includes(queryLower) ||\n      song.genre.toLowerCase().includes(queryLower)\n    );\n\n    return {\n      songs: filteredSongs,\n      total: filteredSongs.length,\n      hasMore: false,\n      isDemoMode: true\n    };\n  }\n\n  // Get mock song by ID for demo mode\n  getMockSongById(id) {\n    const demoSongs = this.getMockSearchResults('').songs;\n    return demoSongs.find(song => song.id === id) || null;\n  }\n\n  // Estimate BPM based on genre for fallback\n  estimateBPM(genre, duration) {\n    const genreBPMRanges = {\n      'pop': { min: 100, max: 130 },\n      'rock': { min: 110, max: 140 },\n      'hip-hop': { min: 70, max: 140 },\n      'dance': { min: 120, max: 135 },\n      'electronic': { min: 120, max: 150 },\n      'country': { min: 120, max: 140 },\n      'r&b': { min: 70, max: 100 },\n      'jazz': { min: 120, max: 200 },\n      'classical': { min: 60, max: 200 },\n      'reggae': { min: 60, max: 90 },\n      'blues': { min: 60, max: 120 },\n      'funk': { min: 100, max: 125 }\n    };\n\n    const genreKey = genre ? genre.toLowerCase() : 'pop';\n    const range = genreBPMRanges[genreKey] || genreBPMRanges['pop'];\n    \n    // Add some variance based on song duration\n    const durationFactor = duration ? Math.min(duration / 180, 1.2) : 1;\n    const estimatedBPM = Math.round((range.min + range.max) / 2 * durationFactor);\n    \n    return Math.max(range.min, Math.min(range.max, estimatedBPM));\n  }\n\n  // Format song data for practice mode\n  formatForPractice(song, targetBPM = null) {\n    // Import TIME_SIGNATURES to set a default\n    const defaultTimeSignature = { value: '4/4', label: '4/4 (Common time)', beatsPerMeasure: 4, noteValue: 4 };\n    \n    return {\n      ...song,\n      name: song.title || song.name, // Ensure name property exists\n      originalBPM: song.bpm,\n      targetBPM: targetBPM || song.bpm,\n      bpm: targetBPM || song.bpm, // Use targetBPM if provided\n      timeSignature: song.timeSignature || defaultTimeSignature,\n      practiceReady: true,\n      tempoAdjustment: targetBPM ? ((targetBPM - song.bpm) / song.bpm * 100).toFixed(1) : 0\n    };\n  }\n\n  // Get recommendations for practice (mock for now)\n  async getRecommendations(bpm, genre = null, limit = 10) {\n    const allSongs = this.getMockSearchResults('').songs;\n    \n    return allSongs\n      .filter(song => {\n        const bpmMatch = Math.abs(song.bpm - bpm) <= 20; // Within 20 BPM\n        const genreMatch = !genre || song.genre.toLowerCase().includes(genre.toLowerCase());\n        return bpmMatch && genreMatch;\n      })\n      .slice(0, limit);\n  }\n}\n\n// Create and export a singleton instance\nconst musicAPI = new MusicAPIService();\nexport default musicAPI;\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  ListItemSecondaryAction,\n  Avatar,\n  IconButton,\n  Typography,\n  Box,\n  Chip,\n  CircularProgress,\n  Alert,\n  InputAdornment,\n  Skeleton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  Search as SearchIcon,\n  Add as AddIcon,\n  CheckCircle as CheckCircleIcon,\n  PlayArrow as PlayArrowIcon,\n  Pause as PauseIcon,\n  MusicNote as MusicNoteIcon,\n  Speed as SpeedIcon,\n  Schedule as ScheduleIcon,\n  Album as AlbumIcon,\n  Info as InfoIcon,\n} from '@mui/icons-material';\nimport useMetronomeStore from '../stores/metronomeStore';\nimport musicAPI from '../services/musicAPI';\n\nconst SongSearchDialog = ({ open, onClose }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [playingPreview, setPlayingPreview] = useState(null);\n  const [audioElement, setAudioElement] = useState(null);\n  const searchTimeoutRef = useRef(null);\n  \n  const { addSong, songs } = useMetronomeStore();\n\n  // Debounced search function\n  useEffect(() => {\n    const performSearch = async () => {\n      if (!searchQuery.trim()) return;\n\n      setLoading(true);\n      setError(null);\n      \n      try {\n        const results = await musicAPI.searchSongs(searchQuery, 15);\n        setSearchResults(results.songs || []);\n      } catch (err) {\n        setError(err.message || 'Failed to search songs');\n        setSearchResults([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (searchQuery.trim().length > 2) {\n      // Clear previous timeout\n      if (searchTimeoutRef.current) {\n        clearTimeout(searchTimeoutRef.current);\n      }\n\n      // Set new timeout for search\n      searchTimeoutRef.current = setTimeout(() => {\n        performSearch();\n      }, 500);\n    } else {\n      setSearchResults([]);\n    }\n\n    return () => {\n      if (searchTimeoutRef.current) {\n        clearTimeout(searchTimeoutRef.current);\n      }\n    };\n  }, [searchQuery]);\n\n  const handleAddSong = (song) => {\n    // Check if song already exists before adding\n    if (isSongAlreadyAdded(song)) {\n      setError('This song is already in your song list!');\n      return;\n    }\n\n    const formattedSong = musicAPI.formatForPractice(song);\n    addSong(formattedSong);\n    \n    // Show success feedback\n    setError(null);\n    \n    // Optional: Close dialog after adding\n    // onClose();\n  };\n\n  const formatDuration = (seconds) => {\n    if (!seconds) return 'Unknown';\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getConfidenceColor = (confidence) => {\n    if (confidence >= 0.8) return 'success';\n    if (confidence >= 0.6) return 'warning';\n    return 'error';\n  };\n\n  const getConfidenceText = (confidence) => {\n    if (confidence >= 0.8) return 'High confidence';\n    if (confidence >= 0.6) return 'Medium confidence';\n    return 'Low confidence';\n  };\n\n  const isSongAlreadyAdded = (song) => {\n    return songs.some(existingSong => \n      existingSong.title?.toLowerCase() === song.title?.toLowerCase() &&\n      existingSong.artist?.toLowerCase() === song.artist?.toLowerCase()\n    );\n  };\n\n  const handlePreviewPlay = (song) => {\n    if (!song.preview_url) {\n      if (song.source === 'demo') {\n        setError('Demo mode: Audio previews are not available. BPM values are provided for practice.');\n      } else {\n        setError('Preview not available for this track. This is common due to licensing restrictions. The BPM data is still accurate for practice.');\n      }\n      return;\n    }\n\n    // If currently playing, stop it\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n\n    // If clicking on the same song that's playing, just stop\n    if (playingPreview === song.id) {\n      setPlayingPreview(null);\n      setAudioElement(null);\n      return;\n    }\n\n    // Handle demo songs with special preview behavior\n    if (song.source === 'demo') {\n      setError('Demo mode: Audio previews are not available. BPM values are provided for practice.');\n      setPlayingPreview(song.id);\n      \n      // Auto-clear the preview state after 2 seconds for demo\n      setTimeout(() => {\n        setPlayingPreview(null);\n      }, 2000);\n      return;\n    }\n\n    // Create new audio element and play\n    const audio = new Audio(song.preview_url);\n    audio.volume = 0.7;\n    \n    audio.addEventListener('ended', () => {\n      setPlayingPreview(null);\n      setAudioElement(null);\n    });\n\n    audio.addEventListener('error', () => {\n      setError('Failed to load preview - this may be due to licensing restrictions');\n      setPlayingPreview(null);\n      setAudioElement(null);\n    });\n\n    audio.play().then(() => {\n      setPlayingPreview(song.id);\n      setAudioElement(audio);\n    }).catch(() => {\n      setError('Failed to play preview - this may be due to licensing restrictions');\n      setPlayingPreview(null);\n      setAudioElement(null);\n    });\n  };\n\n  // Cleanup audio when dialog closes\n  useEffect(() => {\n    if (!open && audioElement) {\n      audioElement.pause();\n      setPlayingPreview(null);\n      setAudioElement(null);\n    }\n  }, [open, audioElement]);\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { height: '80vh' }\n      }}\n    >\n      <DialogTitle>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <SearchIcon color=\"primary\" />\n          Search Songs & BPM\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent dividers>\n        {/* Search Input */}\n        <TextField\n          fullWidth\n          placeholder=\"Search for songs, artists, or albums...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n          sx={{ mb: 2 }}\n        />\n\n        {/* Info Alert */}\n        <Alert severity=\"info\" sx={{ mb: 2 }}>\n          <Typography variant=\"body2\">\n            Search for your favorite songs to get BPM suggestions for practice. \n            BPM values are estimated based on genre and song characteristics, and can be adjusted after adding to your song list.\n          </Typography>\n        </Alert>\n\n        {/* Error Display */}\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 2 }}>\n            {error}\n          </Alert>\n        )}\n\n        {/* Demo Mode Alert */}\n        {!loading && searchResults.length > 0 && searchResults.some(song => song.source === 'demo') && (\n          <Alert severity=\"warning\" sx={{ mb: 2 }}>\n            <Typography variant=\"body2\">\n              <strong>Demo Mode Active:</strong> External music APIs are restricted in development mode due to CORS policies. \n              Showing sample search results with realistic BPM estimates for demonstration purposes.\n            </Typography>\n          </Alert>\n        )}\n\n        {/* Loading State */}\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', py: 3 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {/* Search Results */}\n        {!loading && searchResults.length > 0 && (\n          <List sx={{ maxHeight: '50vh', overflow: 'auto' }}>\n            {searchResults.map((song, index) => (\n              <ListItem\n                key={`${song.id}-${index}`}\n                sx={{\n                  border: '1px solid',\n                  borderColor: playingPreview === song.id ? 'primary.main' : 'divider',\n                  borderRadius: 2,\n                  mb: 2,\n                  p: 2,\n                  backgroundColor: playingPreview === song.id ? 'action.selected' : 'background.paper',\n                  boxShadow: playingPreview === song.id \n                    ? '0 4px 12px rgba(25, 118, 210, 0.15)' \n                    : '0 1px 3px rgba(0,0,0,0.1)',\n                  transition: 'all 0.2s ease-in-out',\n                  '&:hover': {\n                    backgroundColor: playingPreview === song.id ? 'action.selected' : 'action.hover',\n                    boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\n                    transform: 'translateY(-1px)',\n                  },\n                }}\n              >\n                <ListItemAvatar>\n                  <Box \n                    sx={{ \n                      position: 'relative',\n                      width: 64,\n                      height: 64,\n                      borderRadius: 2,\n                      overflow: 'hidden',\n                      boxShadow: '0 2px 8px rgba(0,0,0,0.15)',\n                      '&:hover .play-overlay': {\n                        opacity: song.preview_url ? 1 : 0,\n                      }\n                    }}\n                  >\n                    <Avatar\n                      src={song.artwork}\n                      variant=\"rounded\"\n                      sx={{ \n                        width: '100%', \n                        height: '100%',\n                        borderRadius: 2,\n                        fontSize: '1.5rem'\n                      }}\n                    >\n                      <AlbumIcon sx={{ fontSize: '2rem', color: 'text.secondary' }} />\n                    </Avatar>\n                    \n                    {/* Preview Play Button Overlay - Always show for feedback */}\n                    <Box\n                      className=\"play-overlay\"\n                      sx={{\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        right: 0,\n                        bottom: 0,\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        backgroundColor: 'rgba(0, 0, 0, 0.6)',\n                        opacity: playingPreview === song.id ? 1 : 0,\n                        transition: 'opacity 0.2s ease-in-out',\n                        cursor: 'pointer',\n                      }}\n                      onClick={() => handlePreviewPlay(song)}\n                    >\n                        <Tooltip title={song.source === 'demo' ? \"Demo mode - Click for BPM info\" : \"Play preview\"}>\n                          <IconButton\n                            sx={{\n                              backgroundColor: 'rgba(255, 255, 255, 0.9)',\n                              color: song.source === 'demo' ? 'warning.main' : 'primary.main',\n                              width: 36,\n                              height: 36,\n                              '&:hover': {\n                                backgroundColor: 'white',\n                                transform: 'scale(1.1)',\n                              },\n                              transition: 'all 0.2s ease-in-out',\n                            }}\n                            size=\"small\"\n                          >\n                            {playingPreview === song.id ? (\n                              song.source === 'demo' ? <InfoIcon fontSize=\"small\" /> : <PauseIcon fontSize=\"small\" />\n                            ) : (\n                              song.source === 'demo' ? <InfoIcon fontSize=\"small\" /> : <PlayArrowIcon fontSize=\"small\" />\n                            )}\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    \n                    {/* Playing Indicator */}\n                    {playingPreview === song.id && (\n                      <Box\n                        sx={{\n                          position: 'absolute',\n                          bottom: 4,\n                          right: 4,\n                          backgroundColor: 'primary.main',\n                          borderRadius: '50%',\n                          width: 12,\n                          height: 12,\n                          display: 'flex',\n                          alignItems: 'center',\n                          justifyContent: 'center',\n                        }}\n                      >\n                        <Box\n                          sx={{\n                            width: 6,\n                            height: 6,\n                            backgroundColor: 'white',\n                            borderRadius: '50%',\n                            animation: 'pulse 1.5s ease-in-out infinite',\n                            '@keyframes pulse': {\n                              '0%': {\n                                transform: 'scale(0.8)',\n                                opacity: 1,\n                              },\n                              '50%': {\n                                transform: 'scale(1.2)',\n                                opacity: 0.7,\n                              },\n                              '100%': {\n                                transform: 'scale(0.8)',\n                                opacity: 1,\n                              },\n                            },\n                          }}\n                        />\n                      </Box>\n                    )}\n                  </Box>\n                </ListItemAvatar>\n                \n                <ListItemText\n                  sx={{ ml: 2 }}\n                  primary={\n                    <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, mb: 0.5 }}>\n                      {song.title}\n                    </Typography>\n                  }\n                  secondary={\n                    <Box>\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n                        by {song.artist}\n                      </Typography>\n                      {song.album && (\n                        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mb: 1, display: 'block' }}>\n                          from {song.album}\n                        </Typography>\n                      )}\n                      \n                      {/* Song Details Chips */}\n                      <Box sx={{ display: 'flex', gap: 0.5, mt: 1, flexWrap: 'wrap' }}>\n                        <Chip\n                          icon={<SpeedIcon />}\n                          label={`${song.bpm} BPM`}\n                          size=\"small\"\n                          color=\"primary\"\n                          variant=\"outlined\"\n                        />\n                        \n                        {song.duration && (\n                          <Chip\n                            icon={<ScheduleIcon />}\n                            label={formatDuration(song.duration)}\n                            size=\"small\"\n                            variant=\"outlined\"\n                          />\n                        )}\n                        \n                        {song.genre && (\n                          <Chip\n                            label={song.genre}\n                            size=\"small\"\n                            variant=\"outlined\"\n                          />\n                        )}\n                        \n                        {song.source === 'demo' && (\n                          <Chip\n                            label=\"Demo Mode\"\n                            size=\"small\"\n                            color=\"warning\"\n                            variant=\"outlined\"\n                          />\n                        )}\n                        \n                        {song.estimated_bpm && (\n                          <Tooltip title={getConfidenceText(song.confidence)}>\n                            <Chip\n                              icon={<InfoIcon />}\n                              label=\"Estimated\"\n                              size=\"small\"\n                              color={getConfidenceColor(song.confidence)}\n                              variant=\"outlined\"\n                            />\n                          </Tooltip>\n                        )}\n                        \n                        {playingPreview === song.id && (\n                          <Chip\n                            icon={<PlayArrowIcon />}\n                            label=\"Playing Preview\"\n                            size=\"small\"\n                            color=\"primary\"\n                            variant=\"filled\"\n                          />\n                        )}\n                        \n                        {song.preview_url && playingPreview !== song.id && (\n                          <Chip\n                            icon={<PlayArrowIcon />}\n                            label={song.source === 'demo' ? \"Demo Info\" : \"Preview Available\"}\n                            size=\"small\"\n                            variant=\"outlined\"\n                            color={song.source === 'demo' ? \"warning\" : \"secondary\"}\n                          />\n                        )}\n                      </Box>\n                    </Box>\n                  }\n                  secondaryTypographyProps={{ component: 'div' }}\n                />\n                \n                <ListItemSecondaryAction>\n                  {isSongAlreadyAdded(song) ? (\n                    <Box \n                      sx={{ \n                        display: 'flex', \n                        alignItems: 'center', \n                        gap: 1, \n                        px: 2,\n                        py: 1,\n                        backgroundColor: 'success.light',\n                        borderRadius: 2,\n                        border: '1px solid',\n                        borderColor: 'success.main',\n                      }}\n                    >\n                      <CheckCircleIcon color=\"success\" fontSize=\"small\" />\n                      <Typography \n                        variant=\"body2\" \n                        color=\"success.dark\" \n                        fontWeight=\"medium\"\n                        sx={{ fontSize: '0.75rem' }}\n                      >\n                        ADDED\n                      </Typography>\n                    </Box>\n                  ) : (\n                    <Tooltip title=\"Add to Song List\">\n                      <IconButton\n                        edge=\"end\"\n                        color=\"primary\"\n                        onClick={() => handleAddSong(song)}\n                        sx={{\n                          backgroundColor: 'primary.light',\n                          color: 'primary.main',\n                          '&:hover': {\n                            backgroundColor: 'primary.main',\n                            color: 'white',\n                            transform: 'scale(1.05)',\n                          },\n                          transition: 'all 0.2s ease-in-out',\n                        }}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </Tooltip>\n                  )}\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n        )}\n\n        {/* Loading Skeleton */}\n        {loading && (\n          <List>\n            {[...Array(5)].map((_, index) => (\n              <ListItem key={index} sx={{ mb: 1 }}>\n                <ListItemAvatar>\n                  <Skeleton variant=\"rectangular\" width={56} height={56} />\n                </ListItemAvatar>\n                <ListItemText\n                  primary={<Skeleton variant=\"text\" width=\"60%\" />}\n                  secondary={\n                    <Box>\n                      <Skeleton variant=\"text\" width=\"40%\" />\n                      <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>\n                        <Skeleton variant=\"rectangular\" width={80} height={24} />\n                        <Skeleton variant=\"rectangular\" width={60} height={24} />\n                        <Skeleton variant=\"rectangular\" width={50} height={24} />\n                      </Box>\n                    </Box>\n                  }\n                  secondaryTypographyProps={{ component: 'div' }}\n                />\n              </ListItem>\n            ))}\n          </List>\n        )}\n\n        {/* No Results */}\n        {!loading && searchQuery.trim().length > 2 && searchResults.length === 0 && !error && (\n          <Box sx={{ textAlign: 'center', py: 4 }}>\n            <MusicNoteIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              No songs found\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Try searching with different keywords\n            </Typography>\n          </Box>\n        )}\n\n        {/* Initial State */}\n        {!loading && searchQuery.trim().length <= 2 && (\n          <Box sx={{ textAlign: 'center', py: 4 }}>\n            <SearchIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              Search for Songs\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Enter at least 3 characters to start searching\n            </Typography>\n          </Box>\n        )}\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onClick={onClose}>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default SongSearchDialog;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Chip,\n  Stack,\n  Fab,\n  useMediaQuery,\n  Divider,\n  Alert,\n  Tooltip,\n  InputAdornment,\n} from '@mui/material';\nimport {\n  Add,\n  Edit,\n  Delete,\n  PlayArrow,\n  Search,\n  MusicNote,\n  Timer,\n  Clear,\n  CloudDownload,\n} from '@mui/icons-material';\nimport { useTheme } from '@mui/material/styles';\nimport useMetronomeStore, { TIME_SIGNATURES } from '../stores/metronomeStore';\nimport SongSearchDialog from './SongSearchDialog';\n\nconst SongManager = ({ onPlaySong }) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n  \n  const {\n    songs,\n    currentSong,\n    addSong,\n    updateSong,\n    deleteSong,\n    loadSong,\n    bpm,\n    timeSignature,\n  } = useMetronomeStore();\n\n  const [open, setOpen] = useState(false);\n  const [editingSong, setEditingSong] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchDialogOpen, setSearchDialogOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    bpm: 120,\n    timeSignature: TIME_SIGNATURES[0],\n    duration: '',\n    notes: '',\n  });\n  const [errors, setErrors] = useState({});\n\n  // Filter songs based on search query\n  const filteredSongs = songs.filter(song =>\n    (song.name || song.title || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (song.artist || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (song.notes || '').toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (song.genre || '').toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  // Handle dialog open\n  const handleOpen = (song = null) => {\n    if (song) {\n      setEditingSong(song);\n      setFormData({\n        name: song.name || song.title || '', // Handle both name and title properties\n        bpm: song.bpm,\n        timeSignature: song.timeSignature || TIME_SIGNATURES[0], // Fallback to default if missing\n        duration: song.duration || '',\n        notes: song.notes || '',\n      });\n    } else {\n      setEditingSong(null);\n      setFormData({\n        name: '',\n        bpm: bpm,\n        timeSignature: timeSignature,\n        duration: '',\n        notes: '',\n      });\n    }\n    setErrors({});\n    setOpen(true);\n  };\n\n  // Handle dialog close\n  const handleClose = () => {\n    setOpen(false);\n    setEditingSong(null);\n    setFormData({\n      name: '',\n      bpm: 120,\n      timeSignature: TIME_SIGNATURES[0],\n      duration: '',\n      notes: '',\n    });\n    setErrors({});\n  };\n\n  // Validate form\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData.name || !formData.name.trim()) {\n      newErrors.name = 'Song name is required';\n    }\n    \n    if (formData.bpm < 30 || formData.bpm > 300) {\n      newErrors.bpm = 'BPM must be between 30 and 300';\n    }\n    \n    if (formData.duration && (formData.duration < 10 || formData.duration > 3600)) {\n      newErrors.duration = 'Duration must be between 10 and 3600 seconds';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // Handle save\n  const handleSave = () => {\n    if (!validateForm()) return;\n\n    const songData = {\n      name: (formData.name || '').trim(),\n      bpm: parseInt(formData.bpm),\n      timeSignature: formData.timeSignature,\n      duration: formData.duration ? parseInt(formData.duration) : null,\n      notes: (formData.notes || '').trim() || null,\n      createdAt: editingSong?.createdAt || new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    if (editingSong) {\n      updateSong(editingSong.id, songData);\n    } else {\n      addSong(songData);\n    }\n\n    handleClose();\n  };\n\n  // Handle delete\n  const handleDelete = (songId) => {\n    if (window.confirm('Are you sure you want to delete this song?')) {\n      deleteSong(songId);\n    }\n  };\n\n  // Handle play song\n  const handlePlaySong = (song) => {\n    loadSong(song);\n    \n    // Scroll to metronome and start playing\n    if (onPlaySong) {\n      onPlaySong();\n    }\n  };\n\n  // Format duration for display\n  const formatDuration = (seconds) => {\n    if (!seconds) return null;\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <Card elevation={6}>\n      <CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n          <Typography variant=\"h5\" component=\"h2\" fontWeight=\"bold\">\n            <MusicNote sx={{ mr: 1, verticalAlign: 'middle' }} />\n            Songs\n          </Typography>\n          \n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Tooltip title=\"Search Online Songs\">\n              <Fab\n                size=\"medium\"\n                color=\"secondary\"\n                onClick={() => setSearchDialogOpen(true)}\n                sx={{ \n                  boxShadow: `0 4px 12px ${theme.palette.secondary.main}33`,\n                }}\n              >\n                <CloudDownload />\n              </Fab>\n            </Tooltip>\n            \n            <Tooltip title=\"Add New Song\">\n              <Fab\n                size=\"medium\"\n                color=\"primary\"\n                onClick={() => handleOpen()}\n                sx={{ \n                  boxShadow: `0 4px 12px ${theme.palette.primary.main}33`,\n                }}\n              >\n                <Add />\n              </Fab>\n            </Tooltip>\n          </Box>\n        </Box>\n\n        {/* Search */}\n        {songs.length > 0 && (\n          <TextField\n            fullWidth\n            size=\"small\"\n            placeholder=\"Search songs...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            sx={{ mb: 2 }}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <Search />\n                </InputAdornment>\n              ),\n              endAdornment: searchQuery && (\n                <InputAdornment position=\"end\">\n                  <IconButton size=\"small\" onClick={() => setSearchQuery('')}>\n                    <Clear />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n          />\n        )}\n\n        {/* Songs List */}\n        {filteredSongs.length === 0 ? (\n          <Alert \n            severity=\"info\" \n            sx={{ \n              textAlign: 'center',\n              '& .MuiAlert-message': { width: '100%' }\n            }}\n          >\n            {songs.length === 0 \n              ? 'No songs saved yet. Create your first song!' \n              : 'No songs match your search.'\n            }\n          </Alert>\n        ) : (\n          <List disablePadding>\n            {filteredSongs.map((song, index) => (\n              <React.Fragment key={song.id}>\n                <ListItem\n                  sx={{\n                    bgcolor: currentSong?.id === song.id ? theme.palette.action.selected : 'transparent',\n                    borderRadius: 1,\n                    mb: 1,\n                    border: currentSong?.id === song.id ? `2px solid ${theme.palette.primary.main}` : 'none',\n                  }}\n                >\n                  <ListItemText\n                    primary={\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>\n                        <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                          {song.title || song.name}\n                        </Typography>\n                        {song.artist && (\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            by {song.artist}\n                          </Typography>\n                        )}\n                        <Stack direction=\"row\" spacing={0.5}>\n                          <Chip \n                            label={`${song.bpm} BPM`} \n                            size=\"small\" \n                            color=\"primary\"\n                            variant=\"outlined\"\n                          />\n                          <Chip \n                            label={song.timeSignature.value} \n                            size=\"small\" \n                            variant=\"outlined\"\n                          />\n                          {song.duration && (\n                            <Chip \n                              label={formatDuration(song.duration)}\n                              size=\"small\" \n                              color=\"secondary\"\n                              variant=\"outlined\"\n                              icon={<Timer />}\n                            />\n                          )}\n                        </Stack>\n                      </Box>\n                    }\n                    secondary={song.notes && (\n                      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 0.5 }}>\n                        {song.notes}\n                      </Typography>\n                    )}\n                    primaryTypographyProps={{ component: 'div' }}\n                  />\n                  \n                  <ListItemSecondaryAction>\n                    <Stack direction=\"row\" spacing={0.5}>\n                      <Tooltip title=\"Load Song\">\n                        <IconButton \n                          size=\"small\" \n                          color=\"primary\"\n                          onClick={() => handlePlaySong(song)}\n                        >\n                          <PlayArrow />\n                        </IconButton>\n                      </Tooltip>\n                      \n                      <Tooltip title=\"Edit Song\">\n                        <IconButton \n                          size=\"small\" \n                          onClick={() => handleOpen(song)}\n                        >\n                          <Edit />\n                        </IconButton>\n                      </Tooltip>\n                      \n                      <Tooltip title=\"Delete Song\">\n                        <IconButton \n                          size=\"small\" \n                          color=\"error\"\n                          onClick={() => handleDelete(song.id)}\n                        >\n                          <Delete />\n                        </IconButton>\n                      </Tooltip>\n                    </Stack>\n                  </ListItemSecondaryAction>\n                </ListItem>\n                \n                {index < filteredSongs.length - 1 && <Divider />}\n              </React.Fragment>\n            ))}\n          </List>\n        )}\n\n        {/* Add/Edit Song Dialog */}\n        <Dialog \n          open={open} \n          onClose={handleClose}\n          maxWidth=\"sm\"\n          fullWidth\n          fullScreen={isMobile}\n        >\n          <DialogTitle>\n            {editingSong ? 'Edit Song' : 'Add New Song'}\n          </DialogTitle>\n          \n          <DialogContent>\n            <Stack spacing={2} sx={{ mt: 1 }}>\n              <TextField\n                label=\"Song Name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                error={!!errors.name}\n                helperText={errors.name}\n                fullWidth\n                required\n              />\n              \n              <TextField\n                label=\"BPM\"\n                type=\"number\"\n                value={formData.bpm}\n                onChange={(e) => setFormData({ ...formData, bpm: parseInt(e.target.value) || 0 })}\n                error={!!errors.bpm}\n                helperText={errors.bpm || 'Between 30 and 300'}\n                fullWidth\n                required\n                inputProps={{ min: 30, max: 300 }}\n              />\n              \n              <FormControl fullWidth>\n                <InputLabel>Time Signature</InputLabel>\n                <Select\n                  value={formData.timeSignature?.value || formData.timeSignature || TIME_SIGNATURES[0].value}\n                  label=\"Time Signature\"\n                  onChange={(e) => {\n                    const sig = TIME_SIGNATURES.find(s => s.value === e.target.value);\n                    setFormData({ ...formData, timeSignature: sig });\n                  }}\n                >\n                  {TIME_SIGNATURES.map((sig) => (\n                    <MenuItem key={sig.value} value={sig.value}>\n                      {sig.value}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              \n              <TextField\n                label=\"Duration (seconds)\"\n                type=\"number\"\n                value={formData.duration}\n                onChange={(e) => setFormData({ ...formData, duration: e.target.value })}\n                error={!!errors.duration}\n                helperText={errors.duration || 'Optional practice duration (10-3600 seconds)'}\n                fullWidth\n                inputProps={{ min: 10, max: 3600 }}\n              />\n              \n              <TextField\n                label=\"Notes\"\n                value={formData.notes}\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                fullWidth\n                multiline\n                rows={3}\n                placeholder=\"Optional notes about this song...\"\n              />\n            </Stack>\n          </DialogContent>\n          \n          <DialogActions sx={{ p: 2 }}>\n            <Button onClick={handleClose}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSave} \n              variant=\"contained\"\n              disabled={!formData.name || !formData.name.trim()}\n            >\n              {editingSong ? 'Update' : 'Save'}\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {/* Song Search Dialog */}\n        <SongSearchDialog\n          open={searchDialogOpen}\n          onClose={() => setSearchDialogOpen(false)}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SongManager;\n"],"names":["constructor","this","backendURL","process","fallbackToDemo","searchSongs","query","limit","arguments","length","undefined","offset","response","fetch","concat","encodeURIComponent","method","headers","mode","ok","Error","status","data","json","songs","map","song","id","title","artist","album","duration","Math","floor","preview_url","previewUrl","artwork","artworkUrl","genre","bpm","explicit","isExplicit","popularity","spotify_url","spotifyUrl","audio_features","audioFeatures","total","hasMore","error","console","warn","message","getMockSearchResults","getSongById","startsWith","getMockSongById","checkHealth","timeout","queryLower","toLowerCase","filteredSongs","source","confidence","tempo","energy","danceability","valence","filter","includes","isDemoMode","find","estimateBPM","genreBPMRanges","min","max","range","durationFactor","estimatedBPM","round","formatForPractice","targetBPM","_objectSpread","name","originalBPM","timeSignature","value","label","beatsPerMeasure","noteValue","practiceReady","tempoAdjustment","toFixed","getRecommendations","bpmMatch","abs","genreMatch","slice","_ref","open","onClose","searchQuery","setSearchQuery","useState","searchResults","setSearchResults","loading","setLoading","setError","playingPreview","setPlayingPreview","audioElement","setAudioElement","searchTimeoutRef","useRef","addSong","useMetronomeStore","useEffect","trim","current","clearTimeout","setTimeout","async","results","musicAPI","err","performSearch","formatDuration","seconds","mins","secs","toString","padStart","getConfidenceColor","isSongAlreadyAdded","some","existingSong","_existingSong$title","_song$title","_existingSong$artist","_song$artist","pause","_jsxs","Dialog","maxWidth","fullWidth","PaperProps","sx","height","children","_jsx","DialogTitle","Box","display","alignItems","gap","SearchIcon","color","DialogContent","dividers","TextField","placeholder","onChange","e","target","InputProps","startAdornment","InputAdornment","position","mb","Alert","severity","Typography","variant","justifyContent","py","CircularProgress","List","maxHeight","overflow","index","ListItem","border","borderColor","borderRadius","p","backgroundColor","boxShadow","transition","transform","ListItemAvatar","width","opacity","Avatar","src","fontSize","AlbumIcon","className","top","left","right","bottom","cursor","onClick","currentTime","audio","Audio","volume","addEventListener","play","then","catch","handlePreviewPlay","Tooltip","IconButton","size","InfoIcon","PauseIcon","PlayArrowIcon","animation","ListItemText","ml","primary","fontWeight","secondary","mt","flexWrap","Chip","icon","SpeedIcon","ScheduleIcon","estimated_bpm","secondaryTypographyProps","component","ListItemSecondaryAction","px","CheckCircleIcon","edge","formattedSong","handleAddSong","AddIcon","Array","_","Skeleton","textAlign","MusicNoteIcon","DialogActions","Button","_formData$timeSignatu","onPlaySong","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","currentSong","updateSong","deleteSong","loadSong","setOpen","editingSong","setEditingSong","searchDialogOpen","setSearchDialogOpen","formData","setFormData","TIME_SIGNATURES","notes","errors","setErrors","handleOpen","handleClose","Card","elevation","CardContent","MusicNote","mr","verticalAlign","Fab","palette","main","CloudDownload","Add","Search","endAdornment","Clear","disablePadding","React","bgcolor","action","selected","Stack","direction","spacing","Timer","primaryTypographyProps","handlePlaySong","PlayArrow","Edit","handleDelete","songId","window","confirm","Delete","Divider","fullScreen","helperText","required","type","parseInt","inputProps","FormControl","InputLabel","Select","sig","s","MenuItem","multiline","rows","handleSave","validateForm","newErrors","Object","keys","songData","createdAt","Date","toISOString","updatedAt","disabled","SongSearchDialog"],"sourceRoot":""}